grammar net.sf.hastee.ST hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate st "http://www.sf.net/hastee/ST"

// entry point
Group:
	(imports+=Import)*
	(members+=NamedObject)*;

Import:
	'import' uri=ExprString;

NamedObject:
	name=ID
	((body=TemplateNamed) | (body=Dictionary));

	// top-level elements: TemplateNamed and Dictionary
TemplateNamed returns TemplateDef:
	{TemplateDef}
	'(' ( (arguments += Attribute (',' arguments+=Attribute)* (',' arguments+=AttributeWithDefaultValue)*)
		| (arguments += AttributeWithDefaultValue (',' arguments+=AttributeWithDefaultValue)*))?
	')' '::='
	(('<<' (elements+=ElementNamed)* '>>')
	| ('"' (elements+=ElementString)* '"'));

Dictionary:
	'::=' '[' pairs+=DictPair (',' pairs+=DictPair)* ']';

DictPair:
	key=ExprString ':' template=TemplateDef;

TemplateDef:
	{TemplateDef}
	(('<<' (elements+=ElementNamed)* '>>')
	| ('"' (elements+=ElementString)* '"'));

Template:
	{Template} (elements+=ElementNamed)*;

Attribute:
	_name=ID;

AttributeWithDefaultValue returns Attribute:
	_name=ID '=' defaultValue = DefaultValue;

DefaultValue:
	string=ExprString
	| bool='true'
	| bool='false';

	// anonymous template
TemplateAnonymous returns TemplateDef:
	{TemplateDef} '{'
	(arguments += Attribute (',' arguments+=Attribute)* '|')?
	(elements += ElementAnonymous)*
	'}';

	// elements allowed in named, string, and anonymous templates
ElementNamed returns Element:
	ElementCommon | ElementTokenNamed;

ElementTokenNamed returns ElementToken:
	token=Token | token='|' | token='}' | token='\\}' | token='"';

ElementString returns Element:
	ElementCommon | ElementTokenString;

ElementTokenString returns ElementToken:
	token=Token | token='|' | token='}' | token='\\}';

ElementAnonymous returns Element:
	ElementCommon | ElementTokenAnonymous;

ElementTokenAnonymous returns ElementToken:
	token=Token | token='\\}' | token='"';

ElementCommon:
	Test
	| ExpressionElement
	| Comment
	| Escape;

ExpressionElement:
	'<' expression=Expression (';' options+=Option (',' options+=Option)*)? '>';

Comment:
	{Comment} '<' '!' (Token | '|' | '}' | '"')* '!' '>';

Escape:
	{Escape} '<' ESCAPE_TOKEN '>';

terminal ESCAPE_TOKEN:
	'\\' ('n' | 't' | '\\');

	// if/elseif/else/endif test
Test:
	'<' 'if' '(' c1+=Conditional ')' '>'
	t1+=Template
	('<' 'elseif' '(' c2+=Conditional ')' '>' t2+=Template)*
	('<' 'else' '>' t3=Template)?
	'<' 'endif' '>';

	// conditional expressions
Conditional:
	AndConditional ({ConditionalBinary.left=current} operator='||' right=AndConditional)*;

AndConditional returns Conditional:
	NotConditional ({ConditionalBinary.left=current} operator='&&' right=NotConditional)*;

NotConditional returns Conditional:
	{ConditionalUnary} unaryOperator='!' condition=ConditionalExpr
	| expression=ExprMember;

ConditionalExpr returns Conditional:
	{ConditionalExpr} expression=NotConditionalExpr
	| '(' Conditional ')';

NotConditionalExpr:
	expr=ExprAttribute ('.' properties+=Property)*;

Property:
	_name=ID // name is private
	| '(' indirect=ExprMap ')';

	// expression
Expression:
	ExprMap;

ExprNoComma:
	member=ExprMember (':' map=MapTemplateRef)?;

Option:
	_name=ID ('=' value=ExprNoComma)?; // option name is private

// TODO: add stuff here
ExprMap:
	members+=ExprMember
	((',' members+=ExprMember)* ':' template=MapTemplateRef)?;

MapTemplateRef:
	ExprReference
	| TemplateAnonymous
	| ExprIndirect;

ExprMember:
	root=ExprInclude ('.' properties+=Property)*;

ExprInclude:
	ExprReference
	| ExprPrimary;

	// call to template
ExprReference:
	objRef=[NamedObject] '(' args=ExprTemplateArgs? ')';

ExprTemplateArgs:
	NamedArgs
	| Args;

NamedArgs:
	args+=NamedArg (',' args+=NamedArg)*;

NamedArg returns Arg:
	attribute=[Attribute|ID] '=' value=ExprNoComma;

Args:
	args+=Arg (',' args+=Arg)*;

Arg:
	value=ExprNoComma;

	// primary expression
ExprPrimary:
	ExprAttribute
	| ExprString
	| ExprTemplateAnonymous
	| ExprList
	| ExprIndirect;

ExprAttribute:
	attribute=[Attribute|ID];

ExprString:
	{ExprString} '"' (tokens+=(Token | '|' | '}' | '<<' | '>>'))* '"';

ExprTemplateAnonymous:
	template=TemplateAnonymous;

ExprIndirect:
	'(' expr=Expression ')' ('(' args=ExprTemplateArgs ')')?;

ExprList:
	'[' values+=ExprNoComma (',' values+=ExprNoComma)* ']';

	// tokens
Token:
	'!'
	| '\\"'
	| '('
	| ')'
	| ','
	| '.'
	| ':'
	| '::'
	| '::='
	| ';'
	| '\\<'
	| '='
	| '\\>'
	| '['
	| '\\'
	| ']'
	| '{'
	| '||'
	| '&&'
	| 'else'
	| 'elseif'
	| 'endif'
	| 'if'
	| 'true'
	| 'false'
	| 'import'
	| ID
	| ESCAPE_TOKEN
	| ANY_OTHER;

terminal ID:
	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
