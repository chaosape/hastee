import "net/sf/orcc/backends/llvm/Actor.stg"


///////////////////////////////////////////////////////////////////////////////
// FIFO functions
///////////////////////////////////////////////////////////////////////////////

printStatus(dir, port, index, action, state) ::= <<
%status_<port.name><if(action)>_<action.name><endif><if(state)>_<state.name><endif> = tail call i32 asm sideeffect "STREAM_<dir>_<index>.CAL_STREAM_<dir>_STATUS", "=r,ir"(i32 <index>) nounwind
>>

printPortsStatus(dir, ports, action=false, state=false) ::= <<
<ports: { port | <printStatus(dir, port, i0, action, state)> }; separator="\n">
>>

printReadFunction(port, index, needCast) ::= <<
define internal void @_read_<port.name>(<port.type>* %data, i32 %numTokens) nounwind {
entry:
	%cond = icmp sgt i32 %numTokens, 0
  
	br i1 %cond, label %bb0, label %bb2

bb0:

	br label %bb1
	
bb1:
	%indvar = phi i32 [ 0, %bb0 ], [ %indvar.next, %bb1 ]
	%value = tail call i32 asm sideeffect "STREAM_IN_<index>.CAL_STREAM_IN_READ", "=r,ir"(i32 <index>) nounwind
	<if(needCast)>%casted_value = trunc i32 %value to <port.type><endif>
	%scevgep = getelementptr <port.type>* %data, i32 %indvar
	store <port.type> %<if(needCast)>casted_<endif>value, <port.type>* %scevgep
	%indvar.next = add i32 %indvar, 1
	%exitcond = icmp eq i32 %indvar.next, %numTokens

	br i1 %exitcond, label %bb2, label %bb1

bb2:
	ret void
}
>>

printWriteFunction(port, index, needCast) ::= <<
define internal void @_write_<port.name>(<port.type>* %data, i32 %numTokens) nounwind {
entry:
  %cond = icmp sgt i32 %numTokens, 0
  
  br i1 %cond, label %bb0, label %bb2

bb0:

  br label %bb1

bb1: 
  %indvar = phi i32 [ 0, %bb0 ], [ %indvar.next, %bb1 ]
  %scevgep = getelementptr <port.type>* %data, i32 %indvar
  %value = load <port.type>* %scevgep
  <if(needCast)>%casted_value = <if(port.type.int)>sext<else>zext<endif> <port.type> %value to i32<endif>
  tail call void asm sideeffect "STREAM_OUT_<index>.CAL_STREAM_OUT_WRITE", "ir,ir"(i32 <index>, i32 %<if(needCast)>casted_<endif>value) nounwind
  %indvar.next = add i32 %indvar, 1
  %exitcond = icmp eq i32 %indvar.next, %numTokens
  
  br i1 %exitcond, label %bb2, label %bb1

bb2:
  ret void
}
>>

printPeekFunction(port, index, needCast) ::= <<
define internal void @_peek_<port.name>(<port.type>* %data, i32 %numTokens) nounwind {
entry:
	%cond = icmp sgt i32 %numTokens, 0
  
	br i1 %cond, label %bb0, label %bb2

bb0:

	br label %bb1
	
bb1:
	%indvar = phi i32 [ 0, %bb0 ], [ %indvar.next, %bb1 ]
	%value = tail call i32 asm sideeffect "STREAM_IN_<index>.CAL_STREAM_IN_PEEK", "=r,ir"(i32 <index>) nounwind
	<if(needCast)>%casted_value = trunc i32 %value to <port.type><endif>
	%scevgep = getelementptr <port.type>* %data, i32 %indvar
	store <port.type> %<if(needCast)>casted_<endif>value, <port.type>* %scevgep
	%indvar.next = add i32 %indvar, 1
	%exitcond = icmp eq i32 %indvar.next, %numTokens

	br i1 %exitcond, label %bb2, label %bb1

bb2:
	ret void
}
>>

printReadCall(port, var, numTokens) ::= <<
%<var.name>_ptr = bitcast <var.type>* %<var.name> to <port.type>*
call void @_read_<port.name>(<port.type>* %<var.name>_ptr, i32 <numTokens>)
>>

printReadCalls(inputPattern) ::= <<
<inputPattern.ports: { port | <printReadCall(port, inputPattern.portToVarMap.(port), inputPattern.numTokensMap.(port))> }; separator="\n">
>>

printWriteCall(port, var, numTokens) ::= <<
%<var.name>_ptr = bitcast <var.type>* %<var.name> to <port.type>*
call void @_write_<port.name>(<port.type>* %<var.name>_ptr, i32 <numTokens>)
>>

printWriteCalls(outputPattern) ::= <<
<outputPattern.ports: { port | <printWriteCall(port, outputPattern.portToVarMap.(port), outputPattern.numTokensMap.(port))> }; separator="\n">
>>

printPeekCall(port, var, numTokens) ::= <<
%<var.name>_ptr = bitcast <var.type>* %<var.name> to <port.type>*
call void @_peek_<port.name>(<port.type>* %<var.name>_ptr, i32 <numTokens>)
>>

printPeekCalls(peekPattern) ::= <<
<peekPattern.ports: { port | <printPeekCall(port, peekPattern.portToVarMap.(port), peekPattern.numTokensMap.(port))> }; separator="\n">
>>


///////////////////////////////////////////////////////////////////////////////
// Scheduler
///////////////////////////////////////////////////////////////////////////////

checkOutputPorts(action, port, restPorts, portToIndexMap, state, lastPort=false) ::= <<
<if(!lastPort)>
%has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = icmp sge i32 %status_<port.name>_<action.name><if(state)>_<state.name><endif>, <pattern.numTokensMap.(port)>
<else>
%available_output_<if(state)><state.name>_<endif><action.name>_<port.name> = icmp sge i32 %status_<port.name>_<action.name><if(state)>_<state.name><endif>, <pattern.numTokensMap.(port)>
%has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = and i1 %has_valid_outputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(lastPort)>, %available_output_<if(state)><state.name>_<endif><action.name>_<port.name><
endif><
if(restPorts)>
<checkOutputPorts(action, first(restPorts), rest(restPorts), portToIndexMap, state, port)><
endif>
>>

checkOutputPattern(action, pattern, state=false) ::= <<
<checkOutputPorts(action, first(pattern.ports), rest(pattern.ports), instance.actor.templateData.portToIndexByPatternMap.(pattern), state)>
>>

checkInputPorts(action, port, restPorts, portToIndexMap, state, lastPort=false) ::= <<
<if(!lastPort)>
%has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = icmp sge i32 %status_<port.name>, <pattern.numTokensMap.(port)>
<else>
%available_input_<if(state)><state.name>_<endif><action.name>_<port.name> = icmp sge i32 %status_<port.name>, <pattern.numTokensMap.(port)>
%has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(port)> = and i1 %has_valid_inputs_<if(state)><state.name>_<endif><action.name>_<portToIndexMap.(lastPort)>, %available_input_<if(state)><state.name>_<endif><action.name>_<port.name><
endif><
if(restPorts)>
<checkInputPorts(action, first(restPorts), rest(restPorts), portToIndexMap, state, port)><
endif>
>>

checkInputPattern(action, pattern, state=false) ::= <<
<checkInputPorts(action, first(pattern.ports), rest(pattern.ports), instance.actor.templateData.portToIndexByPatternMap.(pattern), state)>
>>

actionTest(action) ::= <<
	; ACTION <action.name>
<if(!action.inputPattern.empty)
>	;; Input pattern
	<checkInputPattern(action, action.inputPattern)>
	%is_schedulable_<action.name> = call i1 @<action.scheduler.name> ()
	%is_fireable_<action.name> = and i1 %is_schedulable_<action.name>, %has_valid_inputs_<action.name>_<length(action.inputPattern.ports)>
	
	br i1 %is_fireable_<action.name>, label %bb_<action.name>_check_outputs, label %bb_<action.name>_unschedulable<
else
>	;; Empty input pattern
	%is_fireable_<action.name> = call i1 @<action.scheduler.name> ()
	
	br i1 %is_fireable_<action.name>, label %bb_<action.name>_check_outputs, label %bb_<action.name>_unschedulable<
endif>


bb_<action.name>_check_outputs:
<if(!action.outputPattern.empty)
>	;; Output pattern
	<printPortsStatus("OUT", actor.outputs, action)>
	<checkOutputPattern(action, action.outputPattern)>
	
	br i1 %has_valid_outputs_<action.name>_<length(action.outputPattern.ports)>, label %bb_<action.name>_fire, label %bb_<action.name>_check_outputs<
else
>	;; Empty output pattern
	
	br label %bb_<action.name>_fire<
endif>


bb_<action.name>_fire:
	call void @<action.body.name> ()

	br label %bb_scheduler_start

bb_<action.name>_unschedulable:
>>

printActions(actions) ::= <<
	; ------- Actions outside the FSM --------
<actions: actionTest(); separator="\n">
	; ---- End of actions outside the FSM ----
>>

schedulerWithoutFSM(actions) ::= <<
<printActions(actions)>

	br label %bb_scheduler_start
>>

actionTestState(sourceState, transition, restTransitionsList) ::= <<
	; ACTION <transition.action.name>
<if(!transition.action.inputPattern.empty)
>	;; Input pattern
	<checkInputPattern(transition.action, transition.action.inputPattern, sourceState)>
	%is_schedulable_<sourceState.name>_<transition.action.name> = call i1 @<transition.action.scheduler.name> ()
	%is_fireable_<sourceState.name>_<transition.action.name> = and i1 %is_schedulable_<sourceState.name>_<transition.action.name>, %has_valid_inputs_<sourceState.name>_<transition.action.name>_<length(transition.action.inputPattern.ports)>
	
	br i1 %is_fireable_<sourceState.name>_<transition.action.name>, label %bb_<sourceState.name>_<transition.action.name>_check_outputs, label %bb_<sourceState.name>_<transition.action.name>_unschedulable<
else
>	;; Empty input pattern
	%is_fireable_<sourceState.name>_<transition.action.name> = call i1 @<transition.action.scheduler.name> ()
	
	br i1 %is_fireable_<sourceState.name>_<transition.action.name>, label %bb_<sourceState.name>_<transition.action.name>_check_outputs, label %bb_<sourceState.name>_<transition.action.name>_unschedulable<
endif>


bb_<sourceState.name>_<transition.action.name>_check_outputs:
<if(!transition.action.outputPattern.empty)
>	;; Output pattern
	<printPortsStatus("OUT", actor.outputs, transition.action, sourceState)>
	<checkOutputPattern(transition.action, transition.action.outputPattern, sourceState)>
	
	br i1 %has_valid_outputs_<sourceState.name>_<transition.action.name>_<length(transition.action.outputPattern.ports)>, label %bb_<sourceState.name>_<transition.action.name>_fire, label %bb_scheduler_start<
else
>	;; Empty output pattern
	
	br label %bb_<sourceState.name>_<transition.action.name>_fire<
endif>


bb_<sourceState.name>_<transition.action.name>_fire:
	call void @<transition.action.body.name> ()
	store i32 <instance.actor.templateData.stateToLabelMap.(transition.target)>, i32* @_FSM_state
	
	br label %bb_scheduler_start

bb_<sourceState.name>_<transition.action.name>_unschedulable:

<if(restTransitionsList)>
<actionTestState(sourceState, first(restTransitionsList), rest(restTransitionsList))><
else
>	br label %bb_scheduler_start
<endif>
>>

schedulingStates(sourceState, transitionsList) ::= <<
<actionTestState(sourceState, first(transitionsList), rest(transitionsList))>
>>

printTransition(state) ::= <<
; STATE <state.name>
bb_s_<state.name>:
<schedulingStates(state, state.outgoing)>
>>

printFsmState(state) ::= <<
i32 <instance.actor.templateData.stateToLabelMap.(state)>, label %bb_s_<state.name>
>>

printFsmSwitch(fsm) ::= <<
%local_FSM_state = load i32* @_FSM_state
switch i32 %local_FSM_state, label %default [
					<fsm.states: printFsmState(); separator="\n"> ]
>>

schedulerWithFSM(actions, fsm) ::= <<
<if(actions)>
<printActions(actions)>
	br label %bb_fsm_start

bb_fsm_start:
<endif>

	<printFsmSwitch(fsm)>
	
	br label %bb_scheduler_start

default:
	; TODO: print error
	br label %bb_scheduler_start

<fsm.states: printTransition(); separator="\n">
>>


///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

printAction(action) ::= <<
define internal <action.scheduler.returnType> @<action.scheduler.name>(<action.scheduler.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.scheduler.locals: variableDeclaration()>
<if(action.inputPattern)>
	<action.peekPattern.variables: variableDeclaration()>
	<printPeekCalls(action.peekPattern)>
<endif>
	br label %bb1
	
<printNodes(action.scheduler.nodes)>
}

define internal void @<action.body.name>(<action.body.parameters: argumentDeclaration(); wrap, anchor, separator=", ">) nounwind {
entry:
	<action.body.locals: variableDeclaration()>
<if(action.inputPattern)>
	<action.inputPattern.variables: variableDeclaration()>
<endif>
<if(action.outputPattern)>
	<action.outputPattern.variables: variableDeclaration()>
<endif>
<if(action.inputPattern)>
	<printReadCalls(action.inputPattern)>
<endif>
	br label %bb1
	
<printNodes(action.body.nodes, false)>
<if(action.outputPattern)>
	<printWriteCalls(action.outputPattern)>
<endif>
	ret void
}
>>

callInitialize(initialize) ::= <<
call <initialize.body.returnType> @<initialize.body.name> ()
>>

actorParameter(var, expr) ::= <<
@<var.name> = global <var.type> <Constant(expr, var.type)>
>>

///////////////////////////////////////////////////////////////////////////////
// Instance
///////////////////////////////////////////////////////////////////////////////

printActor(actor, options) ::= <<
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Source file is "<instance.actor.file>"

<if(instance.actor.parameters)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Parameter values of the instance
<instance.arguments: { argument | <actorParameter(argument.variable, argument.value)> }; separator="\n">
<endif>

<if(actor.stateVars)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; State variables of the actor
<actor.stateVars: stateVar(); separator="\n">
<endif>

<if(actor.inputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Input FIFOs
<actor.inputs: { input | <printReadFunction(input, i0, actor.templateData.portToNeedCastMap.(input))> }; separator="\n\n">

<actor.inputs: { input | <printPeekFunction(input, i0, actor.templateData.portToNeedCastMap.(input))> }; separator="\n\n">
<endif>

<if(actor.outputs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Output FIFOs
<actor.outputs: { output | <printWriteFunction(output, i0, actor.templateData.portToNeedCastMap.(output))> }; separator="\n\n">
<endif>

<if(actor.procs)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Functions/procedures
<actor.procs: {proc | <procedure(procedure = proc)>}>
<endif>

<if(actor.initializes)>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initializes
<actor.initializes: printAction(); separator="\n\n">
<endif>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Actions
<actor.actions: printAction(); separator="\n\n">

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Action-scheduler
<if(actor.fsm)>
@_FSM_state = global i32 <actor.templateData.stateToLabelMap.(actor.fsm.initialState)>
<endif>

define void @main() noreturn nounwind noinline {
entry:
	<actor.initializes: callInitialize(); separator="\n">

	br label %bb_scheduler_start

	bb_scheduler_start:
	<printPortsStatus("IN", actor.inputs)>
<if(actor.fsm)
><schedulerWithFSM(actor.actionsOutsideFsm, actor.fsm)><
else
><schedulerWithoutFSM(actor.actionsOutsideFsm)><
endif>
}
>>

printInstance(instance, options) ::= <<
<if(instance.actor)><printActor(instance.actor, options)><endif>
>>
