import "net/sf/orcc/backends/c/Actor.stg"

///////////////////////////////////////////////////////////////////////////////
// FIFO declaration
///////////////////////////////////////////////////////////////////////////////

declareFifo(port) ::= <<
private Fifo\<<port.type>\> fifo_<port.name>;
>>

assignFifo(port) ::= <<
if ("<port.name>".equals(portName)) {
	fifo_<port.name> = (Fifo\<<port.type>\>) fifo;
} else 
>>

///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// a variable definition
// called by "function parameter", or "state variable with value"
variableDeclaration(variable, prefix="") ::= <<
<variable.type> <prefix><variable.name>
>>

// a variable definition with initialization
// called by "local variable", or "state variable with no value"
variableDeclarationInit(variable, prefix="") ::= <%
<variableDeclaration(variable, prefix)>
<if(variable.type.dimensions)> = new <variable.type.innermostType><listSize(variable.type.dimensions)>
<endif>;
%>

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

printBool(boolean) ::= <%
<if (boolean.value)>
	true
<else>
	false
<endif>
%>

// a state variable
stateVar(variable) ::= <%
private <if(variable.initialized)>
<if (!variable.assignable)> static <endif>
<variableDeclaration(variable)> = <Constant(variable.initialValue)>;
<else>
<variableDeclarationInit(variable)>;
<endif>
%>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

printExpressionParameter(arg) ::= <%
<if (arg.value.exprBool || arg.value.exprInt || arg.value.exprFloat || arg.value.exprList)>
<Constant(arg.value)>
<elseif (arg.value.exprBinary)>
(<arg.value>)
<else>
<arg.value>
<endif>
%>

printParameter(arg) ::= <%
<if (arg.byVal)>
	<printExpressionParameter(arg)>
<else>
	<arg.use.variable.name>
<endif>
%>

printCallParam(param, actor) ::= <%
<if (param.byRef)>
&<param.use.variable><param.indexes : {index | [<index>]}>
<else>
	<if (actor.templateData.castedListReferences.(param))>
		(<actor.templateData.castedListReferences.(param)>)(<param.value>)
	<else>
		<param.value>
	<endif>
<endif>
%>

printCallProcedure(call, actor) ::= <%
<if (call.procedure.native)>NativeProcedure.<endif>
<call.procedure.name>(<call.parameters: printCallParam(actor); separator=", ">);
%>

printCall(call, actor) ::= <%
<if(call.print)>
	System.out.print(<call.parameters: printParameter(); separator=" + ">);
<else>
	<if(call.target)>
		<call.target.variable.indexedName> = 
	<endif>
	<printCallProcedure(call, actor)>
<endif>
%>

printLoad(load) ::= <%
<load.target.variable.name> = 
<if(action.inputPattern.varToPortMap.(load.source.variable))>
read_
<elseif(action.outputPattern.varToPortMap.(load.source.variable))>
write_
<elseif(action.peekPattern.varToPortMap.(load.source.variable))>
peek_
<endif>
<load.source.variable.name><load.indexes : printIndex()>;
%>

printStore(store) ::= <<
<if(action.inputPattern.varToPortMap.(store.target.variable))>read_<
elseif(action.outputPattern.varToPortMap.(store.target.variable))>write_<
elseif(action.peekPattern.varToPortMap.(store.target.variable))>peek_<
endif><store.target.variable.name><store.indexes : printIndex()> = <store.value>;
>>

printWrite(port, source, numTokens) ::= <<
for(int fifo_index = 0 ; fifo_index \< <numTokens> ; ++fifo_index) {
	fifo_<port.name>.write(write_<source.name>[fifo_index]);
}
>>

printRead(port, target, numTokens) ::= <<
for(int fifo_index = 0 ; fifo_index \< <numTokens> ; ++fifo_index) {
	read_<target.name>[fifo_index] = fifo_<port.name>.read();
}
>>

printPeek(port, target, numTokens) ::= <<
<target.type> peek_<target.name> = new <target.type.innermostType><listSize(target.type.dimensions)>;
for(int fifo_index = 0 ; fifo_index \< <numTokens> ; ++fifo_index) {
	peek_<target.name>[fifo_index] = fifo_<port.name>.peek(fifo_index);
}
>>

printReturn(return) ::= <<
<if(return.value)>
return (<return.block.procedure.returnType>) (<return.value>);<
endif>
>>

printIndex(index) ::= <<
[<if (index.type.long)>(int) <if (index.exprBinary)> (<index>) <else><index><endif><else><index><endif>]
>>


///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

printNodes(nodes) ::= <<
<nodes: {node | <if (node.nodeBlock)><printBlockNode(node, actor)><
elseif (node.nodeIf)><printIfNode(node, actor)><
elseif (node.nodeWhile)><printWhileNode(node, actor)><
endif>}; separator="\n">
>>

printBlockNode(blockNode, actor) ::= <<
<printInstructions(blockNode.instructions, actor)>
>>

printIfNode(ifNode, actor) ::= <<

if (<ifNode.condition>) {
	<printNodes(ifNode.thenNodes)>
}<if(ifNode.elseNodes)> else {
	<printNodes(ifNode.elseNodes)>
}<endif>
<printBlockNode(ifNode.joinNode, actor)>
>>

printWhileNode(whileNode, actor) ::= <<

while (<whileNode.condition>) {
	<printNodes(whileNode.nodes)>
}
<printBlockNode(whileNode.joinNode, actor)>
>>

printInstructions(instructions, actor) ::= <<
<instructions: {instr | <
if (instr.assign)><printAssign(instr)><
elseif (instr.call)><printCall(instr, actor)><
elseif (instr.load)><printLoad(instr)><
elseif (instr.return)><printReturn(instr)><
elseif (instr.store)><printStore(instr)><
endif>}; separator="\n">
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure and actions
///////////////////////////////////////////////////////////////////////////////

printProcedure(procedure, action="") ::= <<
<if(!procedure.native)>
private <procedure.returnType> <procedure.name>(<procedure.parameters: {parameter | <variableDeclaration(parameter.variable)>}; wrap, anchor, separator=", ">) {
	<procedure.locals: {local | <variableDeclarationInit(local)>};separator="\n">
	<printNodes(procedure.nodes)>
}
<endif>
>>

printAction(action) ::= <<
private <action.scheduler.returnType> <action.scheduler.name>() {
	<action.scheduler.locals: {local | <variableDeclarationInit(local)>};separator="\n">
	<action.peekPattern.ports : { port | <printPeek(port, action.peekPattern.portToVarMap.(port), action.peekPattern.numTokensMap.(port))>};separator="\n">
	<printNodes(action.scheduler.nodes)>
}

private void <action.name>() {
	<action.body.locals: {local | <variableDeclarationInit(local)>};separator="\n">
	<action.inputPattern.ports : { port | <variableDeclarationInit(action.inputPattern.portToVarMap.(port), "read_")> };separator="\n">
	<action.outputPattern.ports : { port | <variableDeclarationInit(action.outputPattern.portToVarMap.(port), "write_")> };separator="\n">
	
	<action.inputPattern.ports : { port | <printRead(port, action.inputPattern.portToVarMap.(port), action.inputPattern.numTokensMap.(port))> }; separator="\n">
	<printNodes(action.body.nodes)>
	<action.outputPattern.ports : { port | <printWrite(port, action.outputPattern.portToVarMap.(port), action.outputPattern.numTokensMap.(port))> }; separator="\n">
}
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPattern(pattern) ::= <<
<pattern.ports:{port|fifo_<port.name>.hasRoom(<pattern.numTokensMap.(port)>)}; separator=" && ">
>>

checkInputPatternPort(port) ::= <<
fifo_<port.name>.hasTokens(<pattern.numTokensMap.(port)>)
>>

checkInputPattern(pattern) ::= <<
<pattern.ports: { port | <checkInputPatternPort(port)> && }>
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionCall(action) ::= <<
<action>();
res = true;
i++;
>>

actionTest(action) ::= <<
if (<checkInputPattern(action.inputPattern)>isSchedulable_<action.name>()) {
	<if(!action.outputPattern.empty)>
	if (<outputPattern(action.outputPattern)>) {
		<actionCall(action)>
	}
	<else>
	<actionCall(action)>
	<endif>
}
>>

schedulingTest(actions) ::= <<
<actions: actionTest(); separator=" else ">
>>

scheduler(actions) ::= <<
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		<if(actions)>
		<schedulingTest(actions)>
		<endif>
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionCallState(transition) ::= <<
<transition.action>();
_FSM_state = States.s_<transition.target.name>;
res = true;
>>

actionTestState(transition) ::= <<
if (<checkInputPattern(transition.action.inputPattern)>isSchedulable_<transition.action>()) {
	<if(!transition.action.outputPattern.empty)>
	if (<outputPattern(transition.action.outputPattern)>) {
		<actionCallState(transition)>
	}
	<else>
	<actionCallState(transition)>
	<endif>
}
>>

schedulingTestState(transitionsList) ::= <<
<transitionsList: actionTestState(); separator=" else ">
>>

stateScheduler(state) ::= <<
private boolean stateScheduler_<state.name>() {
	boolean res = false;
	<schedulingTestState(state.outgoing)>
	return res;
}
>>

switchState(state) ::= <<

case s_<state.name>:
	res = stateScheduler_<state.name>();
	if (res) {
		i++;
	}
	break;
>>

printSwitch(states) ::= <<
switch (_FSM_state) {
<states: switchState()>
default:
	System.out.println("unknown state: %s\n" + _FSM_state);
	break;
}
>>

schedulerFSM(actions, fsm) ::= <<
private enum States {
	<fsm.states : {state | s_<state.name>}; separator=",\n">
};

private States _FSM_state = States.s_<fsm.initialState.name>;

<if(actions)>
private boolean outside_FSM_scheduler() {
	boolean res = false;
	int i = 0;
	<schedulingTest(actions)>
	return res;
}

<endif>
<fsm.states: stateScheduler(); separator="\n">
@Override
public int schedule() {
	boolean res = true;
	int i = 0;

	while (res) {
		res = false;
		<if(actions)>
		if (outside_FSM_scheduler()) {
			res = true;
			i++;
		} else {
			<printSwitch(fsm.states)>
		}
		<else>
		<printSwitch(fsm.states)>
		<endif>
	}

	return i;
}

>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

printActor(actor, options) ::= <<
/**
 * Generated from "<actor.name>"
 */
package <actor.package>;

import net.sf.orcc.runtime.Fifo;
import net.sf.orcc.runtime.actors.IActor;
<if (options.usingNativeProc)>import net.sf.orcc.runtime.NativeProcedure;<endif> 

public class <actor.simpleName> implements IActor {

	// Input FIFOs
	<actor.inputs: declareFifo();separator="\n">
	// Output FIFOs
	<actor.outputs: declareFifo();separator="\n">
	// Parameters of the actor
	<actor.parameters: {param|private <variableDeclarationInit(param)>;};separator="\n">
	// State variables of the actor
	<actor.stateVars: stateVar(); separator="\n">
	
	public <actor.simpleName>(<actor.parameters: variableDeclaration(); wrap, separator=", ">) {
		<actor.parameters: {param|this.<param.name> = <param.name>;}; separator="\n">
	}
	
	// Functions/procedures
	<actor.procs: printProcedure();separator="\n">
	// Actions
	<actor.actions: printAction();separator="\n">
<if(actor.initializes)>
	// Initializes
	<actor.initializes: printAction()>
<endif>
	@Override
	public void initialize() {
<if(actor.initializes)>
		boolean res = false;
		int i = 0;
		if (res){
		}

		<schedulingTest(actor.initializes)>
<endif>
	}

	@Override
	@SuppressWarnings("unchecked")
	public \<T\> void setFifo(String portName, Fifo\<T\> fifo) {
		<actor.inputs: assignFifo()>
		<actor.outputs: assignFifo()>{
			String msg = "unknown port \"" + portName + "\"";
			throw new IllegalArgumentException(msg);
		}
	}

<if(actor.fsm)>
	// Action scheduler (FSM)
	<schedulerFSM(actor.actionsOutsideFsm, actor.fsm)>
<else>
	// Action scheduler (simple)
	<scheduler(actor.actionsOutsideFsm)>
<endif>

}

>>
