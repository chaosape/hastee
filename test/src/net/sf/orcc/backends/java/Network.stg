///////////////////////////////////////////////////////////////////////////////
// declaration() and scheduler()
//////////////////////////////////////////////////////////////////////////////

declareBroadcast(entity) ::= <<
<if (entity.broadcast)>
private Broadcast\<<entity.input.type>\> actor_<entity.name>;
<endif>
>>

createBroadcast(entity) ::= <<
<if (entity.broadcast)>
actor_<entity.name> = new Broadcast\<<entity.input.type>\>(<length(entity.outputs)>);
<endif>
>>

declareActor(instance) ::= <<
<if (instance.actor)>
private IActor actor_<instance.name>;
<endif>
>>

args(arguments) ::= <<
<arguments: {a | <a.value>}; wrap, separator=", ">
>>

constructActor(instance) ::= <<
<if (instance.actor)>
<if (instance.actor.native)>
actor_<instance.name> = new <instance.actor.hierarchicalName>(<args(instance.arguments)>);
<else>
actor_<instance.name> = new <instance.actor.hierarchicalName>(<args(instance.arguments)>);
<endif>
<endif>
>>

scheduleActor(vertex) ::= <<
i += actor_<vertex.name>.schedule();
>>

///////////////////////////////////////////////////////////////////////////////
// print calls to initialize() and scheduler()
///////////////////////////////////////////////////////////////////////////////

printInitializes(instances) ::= <<
<instances: printInitialize()>
>>

printInitialize(instance) ::= <<
<if (instance.actor && !instance.actor.initializes.empty)>
actor_<instance.name>.initialize();
<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// allocates FIFOs
///////////////////////////////////////////////////////////////////////////////

setupFifo(connection) ::= <<
f = new Fifo\<<connection.targetPort.type>\>(<connection.size>);
actor_<connection.source.name>.setFifo("<connection.sourcePort.name>", f);
actor_<connection.target.name>.setFifo("<connection.targetPort.name>", f);
>>

///////////////////////////////////////////////////////////////////////////////
// print network
printNetwork(network, options) ::= <<
/**
 * Generated from "<network.name>"
 */
package <network.package>;

import net.sf.orcc.runtime.*;
import net.sf.orcc.runtime.actors.*;
import net.sf.orcc.runtime.source.GenericSource;

public class <network.simpleName> implements IScheduler {
	
	// Actors
	<network.instances: declareActor()>
	// Broadcasts
	<network.entities: declareBroadcast()>
	@Override
	@SuppressWarnings("unchecked")
	public void initialize() {
		// Instantiate actors
		<network.instances: constructActor()>
		// Instantiate broadcast
		<network.entities: createBroadcast()>
		@SuppressWarnings("rawtypes")
		Fifo f;
		<network.connections: setupFifo(); separator="\n">
	}

	@Override
	public void schedule() {
		<printInitializes(network.instances)>
		int i;
		do {
			i = 0;
			<network.instances: scheduleActor(); separator="\n">
			<network.entities: scheduleActor(); separator="\n">
		} while (i \> 0);
		System.out.println("No more action to launch, exit the application.");
	}
	
	public void runNetwork(String sourceFilename, Object displayOutputStreamProxy) {
		// Setup arguments for launch
		String[] args = {sourceFilename};
		CLIParameters.getInstance().setArguments(args);
		
		IScheduler scheduler = new <network.simpleName>();
		scheduler.initialize();
		scheduler.schedule();
	}
	
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		CLIParameters.getInstance().setArguments(args);
		GenericSource.setFileName(CLIParameters.getInstance().getSourceFile());

		IScheduler scheduler = new <network.simpleName>();
		scheduler.initialize();
		scheduler.schedule();
	}

}

>>
