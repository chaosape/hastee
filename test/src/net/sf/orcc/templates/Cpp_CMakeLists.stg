addActor(actor) ::= <<
<if (!actor.native)>
<if (!actor.packageAsList.empty)><actor.packageAsList; separator="/">/<endif><actor.simpleName>.cpp
<endif>
>>


///////////////////////////////////////////////////////////////////////////////
// Cpp_CMakeLists

Cpp_CMakeLists(network, options) ::= <<
# Generated from $network.name$

cmake_minimum_required (VERSION 2.8)
project (<network.name>)

if(MSVC)
set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG /MTd /ZI /Ob0 /Od /RTC1")
set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
endif(MSVC)

if(CMAKE_COMPILER_IS_GNUCXX)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -ansi -pedantic -pthread -fsigned-char -fPIC")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
endif()

# Common packages required
find_library(CALaka_LIBRARY CALaka HINTS $ENV{CALDIR} PATH_SUFFIXES lib)
find_library(System_LIBRARY System HINTS $ENV{CALDIR} PATH_SUFFIXES lib)
find_library(Thread_LIBRARY Thread HINTS $ENV{CALDIR} PATH_SUFFIXES lib)
find_path(CAL_INCLUDE_DIR actoraka.h HINTS $ENV{CALDIR} PATH_SUFFIXES include include/CAL)


<if(options.needSerDes)>
find_library(AdaptorFactory_LIBRARY AdaptorFactory HINTS $ENV{CALDIR} PATH_SUFFIXES lib)
find_library(Wrapper_LIBRARY Wrapper HINTS $ENV{CALDIR} PATH_SUFFIXES lib)
<endif>


set(includes
${CMAKE_SOURCE_DIR}
${CAL_INCLUDE_DIR}
)

set(libraries
${CALaka_LIBRARY}
${System_LIBRARY}
${Thread_LIBRARY}
)

<if(options.needSerDes)>
set(libraries ${libraries} ${Wrapper_LIBRARY} ${AdaptorFactory_LIBRARY})
<endif>


if(NOT NO_DISPLAY)
find_package(SDL REQUIRED)
set(includes ${includes} ${SDL_INCLUDE_DIR})	
set(libraries ${libraries} ${SDL_LIBRARY})
endif()

include_directories(
${includes}
)


add_executable (<network.name>
<network.name>.cpp
<network.actors : addActor()>
)

target_link_libraries(<network.name>
${libraries}
)

>>
