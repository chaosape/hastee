///////////////////////////////////////////////////////////////////////////////
// Types and variables
///////////////////////////////////////////////////////////////////////////////

// the dimensions of a list: [dim1][dim2]...[dimn]
// does not output anything if <value> is empty
listSize(values) ::= <<
<values : {value | [<value>]} >
>>

varDecl(variable) ::= <<
<
if(variable.port)
><variable.type> <variable>_buf<listSize(variable.type.dimensions)>;
<variable.type> *<variable><
else
><variable.type> <variable><listSize(variable.type.dimensions)><
endif
>
>>

///////////////////////////////////////////////////////////////////////////////
// Constants
///////////////////////////////////////////////////////////////////////////////

Constant(constant) ::= <<
<(constant.class.simpleName)(constant)>
>>

BoolExpr(constant) ::= <<
<if (constant.value)>1<else>0<endif>
>>

IntExpr(number) ::= <<
<number><if (number.long)>L<endif>
>>

// the values of a list: {val1, val2, ..., valn}
ListExpr(constant) ::= <<
{<constant.value: Constant(); wrap, separator=", ">}
>>

StringExpr(constant) ::= <<
"<constant>"
>>

///////////////////////////////////////////////////////////////////////////////
// State variables
///////////////////////////////////////////////////////////////////////////////
stateVar(variable) ::= <<
<if(variable.initialized)>
<if(!variable.assignable && !variable.type.list)>
#define <variable> <Constant(variable.initialValue)>
<else>
static <varDecl(variable)> = <Constant(variable.initialValue)>;
<endif>
<else>
static <varDecl(variable)>;
<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// Instructions
///////////////////////////////////////////////////////////////////////////////

printAssign(assign) ::= <<

<assign.target> = <assign.value>;
>>

printFormatType(type) ::= <<
<if (type.bool)
>i<
elseif (type.float)
>f<
elseif (type.int)
><if (type.long)>ll<endif>i<
elseif (type.list)
>p<
elseif (type.string)
>s<
elseif (type.uint)
><if (type.long)>ll<endif>u<
elseif (type.void)
>p<
endif>
>>

printFormat(parameter) ::= <<
<if (parameter.stringExpr)
>"<parameter>"<
else
> "%<printFormatType(parameter.type)>" <
endif>
>>

printParameter(parameter) ::= <<
<if (!parameter.stringExpr)>, <parameter><endif>
>>

printCall(call) ::= <<

<if(call.print)>printf(<call.parameters: printFormat()><call.parameters: printParameter()>);<
else
><if(call.target)><call.target> = <endif><call.procedure>(<call.parameters; separator=", ">);<
endif>
>>

printLoad(load) ::= <<

<load.target> = <load.source><load.indexes : {index | [<index>]}>;
>>

printPeek(peek) ::= <<

<peek.target> = fifo_<peek.port.type>_peek(<instance.id>_<peek.port>, <peek.target>_buf, <peek.numTokens>);
>>

printRead(read) ::= <<

<if (read.target)
><read.target> = fifo_<read.port.type>_read(<instance.id>_<read.port>, <read.target>_buf, <read.numTokens>);<
endif>
>>

printReadEnd(readEnd) ::= <<
<if(options.("net.sf.orcc.backends.enableTrace"))>
{
	int i;
	for (i = 0; i \< <readEnd.numTokens>; i++) {
		fprintf(file_<readEnd.port.name>, "%<printFormatType(readEnd.port.type)>\n", <readEnd.target>[i]);
	}
}
<endif>

fifo_<readEnd.port.type>_read_end(<instance.id>_<readEnd.port>, <readEnd.numTokens>);
numTokens_<readEnd.port.name> -= <readEnd.numTokens>;
>>

printReturn(return) ::= <<
<if(return.value)>
return <return.value>;<
endif>
>>

printStore(store) ::= <<

<store.target><store.indexes : {index | [<index>]}> = <store.value>;
>>

printWrite(write) ::= <<

<write.target> = fifo_<write.port.type>_write(<instance.id>_<write.port>, <write.target>_buf, <write.numTokens>);
>>

printWriteEnd(writeEnd) ::= <<
<if(options.("net.sf.orcc.backends.enableTrace"))>
{
	int i;
	for (i = 0; i \< <writeEnd.numTokens>; i++) {
		fprintf(file_<writeEnd.port.name>, "%<printFormatType(writeEnd.port.type)>\n", <writeEnd.target>[i]);
	}
}
<endif>

fifo_<writeEnd.port.type>_write_end(<instance.id>_<writeEnd.port>, <writeEnd.target>_buf, <writeEnd.numTokens>);
>>

///////////////////////////////////////////////////////////////////////////////
// Nodes
///////////////////////////////////////////////////////////////////////////////

printInstructions(instructions) ::= <<
<instructions: {instr | <
if (instr.assign)><printAssign(assign=instr)><
elseif (instr.call)><printCall(call=instr)><
elseif (instr.load)><printLoad(load=instr)><
elseif (instr.peek)><printPeek(peek=instr)><
elseif (instr.read)><printRead(read=instr)><
elseif (instr.readEnd)><printReadEnd(readEnd=instr)><
elseif (instr.return)><printReturn(return=instr)><
elseif (instr.store)><printStore(store=instr)><
elseif (instr.write)><printWrite(write=instr)><
elseif (instr.writeEnd)><printWriteEnd(writeEnd=instr)><
endif>}>
>>

printNodes(nodes) ::= <<
<nodes: {node | <if (node.blockNode)><printBlockNode(node)><
elseif (node.ifNode)><printIfNode(node)><
elseif (node.whileNode)><printWhileNode(node)><
endif>}>
>>

// block node
printBlockNode(blockNode) ::= <<
<printInstructions(blockNode.instructions)>
>>

// if node
printIfNode(ifNode) ::= <<

if (<ifNode.value>) {
	<printNodes(ifNode.thenNodes)>
}<if(ifNode.elseNodes)> else {
	<printNodes(ifNode.elseNodes)>
}<endif>
<printBlockNode(ifNode.joinNode)>
>>

// while node
printWhileNode(whileNode) ::= <<

while (<whileNode.value>) {
	<printNodes(whileNode.nodes)>
}
<printBlockNode(whileNode.joinNode)>
>>

///////////////////////////////////////////////////////////////////////////////
// Procedure
///////////////////////////////////////////////////////////////////////////////

procedure(procedure) ::= <<
<if(!procedure.native)>

static <procedure.returnType> <procedure>(<
  procedure.parameters.list: {param | <varDecl(param)>}; wrap, anchor, separator=", ">) {
<if(procedure.locals.list)>
	<procedure.locals.list: {local | <varDecl(local)>;<\n>}>
<endif>
	<printNodes(procedure.nodes)>
}

<endif>
>>

///////////////////////////////////////////////////////////////////////////////
// Action
///////////////////////////////////////////////////////////////////////////////

printAction(action) ::= <<
<procedure(action.body)><procedure(action.scheduler)>
>>

///////////////////////////////////////////////////////////////////////////////
// Action scheduler
///////////////////////////////////////////////////////////////////////////////

outputPatternPort(port) ::= <<
if (!fifo_<port.type>_has_room(<instance.id>_<port>, <pattern.(port)>)) {
	ports |= 0x0<instance.actor.templateData.maskOutput.(port)>;
}
>>

outputPattern(pattern) ::= <<
int ports = 0;
<pattern.keys: outputPatternPort(); separator="\n">
if (ports != 0) {
>>

checkInputPattern(pattern) ::= <<
<pattern.keys: { port | numTokens_<port.name> \>= <pattern.(port)> && }>
>>

printGetNumTokens() ::= <<
<instance.actor.inputs.list:
	{ port | numTokens_<port.name> = fifo_<port.type>_get_num_tokens(<instance.id>_<port>);
}>
>>

printOpenFiles() ::= <<
<instance.actor.inputs.list:
	{ port | file_<port.name> = fopen("<instance.id>_<port.name>.txt", "a");
}><instance.actor.outputs.list:
	{ port | file_<port.name> = fopen("<instance.id>_<port.name>.txt", "a");
}>
>>

printCloseFiles() ::= <<
<instance.actor.inputs.list:
	{ port | fclose(file_<port.name>);
}><instance.actor.outputs.list:
	{ port | fclose(file_<port.name>);
}>
>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler without FSM

actionTest(action, restActions) ::= <<
if (<checkInputPattern(action.inputPattern)>isSchedulable_<action>()) {
	<if(action.outputPattern)>
	<outputPattern(pattern=action.outputPattern)>
		si-\>num_firings = i;
		si-\>reason = full;
		si-\>ports = ports;
<if(options.("net.sf.orcc.backends.enableTrace"))>
		<printCloseFiles()>
<endif>
		return;
	}
	<endif>
	<action.body>();
	i++;
} else {
	<printActions(restActions)>
}
>>

printActions(actions) ::= <<
<if (first(actions))
><actionTest(action=first(actions), restActions=rest(actions))><
else
>si-\>num_firings = i;
si-\>reason = starved;
si-\>ports = 0x0<instance.actor.templateData.maskInputs>;
<if(options.("net.sf.orcc.backends.enableTrace"))>
<printCloseFiles()>
<endif>
return;<
endif>
>>

printActionScheduler(name, actions) ::= <<
void <name>(struct schedinfo_s *si) {
	int i = 0;

	<printGetNumTokens()>
<if(options.("net.sf.orcc.backends.enableTrace"))>
	<printOpenFiles()>
<endif>

	while (1) {
		<printActions(actions)>
	}
}

>>

///////////////////////////////////////////////////////////////////////////////
// Scheduler with FSM

actionTestState(state, restStates) ::= <<
if (<checkInputPattern(state.action.inputPattern)>isSchedulable_<state.action>()) {
	<if (state.action.outputPattern)>
	<outputPattern(state.action.outputPattern)>
		_FSM_state = s_<transition.sourceState>;
		si-\>num_firings = i;
		si-\>reason = full;
		si-\>ports = ports;
		<if(options.("net.sf.orcc.backends.enableTrace"))>
		<printCloseFiles()>
		<endif>
		return;
	}
	<endif>
	<state.action.body>();
	i++;
	goto l_<state.targetState>;
} else {
	<schedulingStates(restStates)>
}
>>

schedulingStates(states) ::= <<
<if (first(states))
><actionTestState(state=first(states), restStates=rest(states))><
else
>_FSM_state = s_<transition.sourceState>;
si-\>num_firings = i;
si-\>reason = starved;
si-\>ports = 0x0<instance.actor.templateData.maskInputsTransition.(transition)>;
<if(options.("net.sf.orcc.backends.enableTrace"))>
<printCloseFiles()>
<endif>
return;<
endif>
>>

printTransition(transition) ::= <<


l_<transition.sourceState>:
	<if (actions)>
	<instance.id>_outside_FSM_scheduler(si);
	i += si-\>num_firings;
	<endif>
	<if (transition.nextStateInfo.empty)>
	printf("stuck in state \"<transition.sourceState>\" in the instance <instance.id>\n");
	wait_for_key();
	exit(1);
	<else>
	<schedulingStates(transition.nextStateInfo)>
	<endif>
>>

switchTransition(transition) ::= <<

case s_<transition.sourceState>:
	goto l_<transition.sourceState>;
>>

printSwitch(transitions) ::= <<
switch (_FSM_state) {
<transitions: switchTransition()>
default:
	printf("unknown state in <instance.id>.c : %s\n", stateNames[_FSM_state]);
	wait_for_key();
	exit(1);
}
>>

schedulerFSM(actions, fsm) ::= <<
enum states {
	s_<first(fsm.states)> = 0,
	<rest(fsm.states) : {state | s_<state>}; separator=",\n">
};

static char *stateNames[] = {
	<fsm.states : {state | "s_<state>"}; separator=",\n">
};

static enum states _FSM_state = s_<fsm.initialState>;

<if(actions)>
<printActionScheduler(name={<instance.id>_outside_FSM_scheduler}, actions=actions)>
<endif>

void <instance.id>_scheduler(struct schedinfo_s *si) {
	int i = 0;

	<printGetNumTokens()>
<if(options.("net.sf.orcc.backends.enableTrace"))>
	<printOpenFiles()>
<endif>

	// jump to FSM state 
	<printSwitch(fsm.transitions)>

	// FSM transitions
<fsm.transitions: printTransition()>
}

>>

parameters(parameters) ::= <<
<parameters.keys: { k | #define <k> <Constant(parameters.(k))>
}>
>>

///////////////////////////////////////////////////////////////////////////////
// Actor
///////////////////////////////////////////////////////////////////////////////

instance(instance, options) ::= <<
// <instance.hierarchicalPath>
// Source file is "<instance.actor.file>"

#include \<stdio.h\>
#include \<stdlib.h\>

#include "orcc.h"
#include "orcc_fifo.h"
#include "orcc_util.h"

////////////////////////////////////////////////////////////////////////////////
// Input FIFOs
<instance.actor.inputs.list: { port | extern struct fifo_<port.type>_s *<instance.id>_<port.name>;
}>
<instance.actor.inputs.list: { port | static int numTokens_<port.name>;
}>
<if(options.("net.sf.orcc.backends.enableTrace"))>
<instance.actor.inputs.list: { port | FILE *file_<port.name>;
}>
<endif>
////////////////////////////////////////////////////////////////////////////////
// Output FIFOs
<instance.actor.outputs.list: { port | extern struct fifo_<port.type>_s *<instance.id>_<port.name>;
}>
<if(options.("net.sf.orcc.backends.enableTrace"))>
<instance.actor.outputs.list: { port | FILE *file_<port.name>;
}>
<endif>
////////////////////////////////////////////////////////////////////////////////
// Parameter values of the instance
<parameters(instance.parameters)>
////////////////////////////////////////////////////////////////////////////////
// State variables of the actor
<instance.actor.stateVars.list: stateVar()>
////////////////////////////////////////////////////////////////////////////////
// Functions/procedures
<instance.actor.procs.list: procedure()>
////////////////////////////////////////////////////////////////////////////////
// Actions
<instance.actor.actions: printAction()>
<if(instance.actor.initializes)>
////////////////////////////////////////////////////////////////////////////////
// Initializes
<instance.actor.initializes: printAction()>
void <instance.id>_initialize(struct schedinfo_s *si) {
	int i = 0;
	<printActions(instance.actor.initializes)>
}
<endif>
////////////////////////////////////////////////////////////////////////////////
// Action scheduler
<if(instance.actor.actionScheduler.fsm)>
<schedulerFSM(actions=instance.actor.actionScheduler.actions, fsm=instance.actor.actionScheduler.fsm)>
<else>
<printActionScheduler(name={<instance.id>_scheduler}, actions=instance.actor.actionScheduler.actions)>
<endif>

>>
